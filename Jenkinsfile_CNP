#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "hmc"
def component = "operational-reports-runner"
def branchesToSync = ['demo','perftest']

GradleBuilder builder = new GradleBuilder(this, product)

def secrets = [
        'hmc-${env}': [
        ]
]

def prSecrets = [
        'hmc-aat': [
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}
withPipeline(type, product, component) {
  afterAlways('test') {
        // hmcts/cnp-jenkins-library may fail to copy artifacts after checkstyle error so repeat command
        // (see /src/uk/gov/hmcts/contino/GradleBuilder.groovy)
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/checkstyle/*.html'

        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/pmd/*.html'
    }

  afterAlways('test') {
        builder.gradle('integration')
    }

    enableAksStagingDeployment()
    disableLegacyDeployment()
    nonServiceApp()
    syncBranchesWithMaster(branchesToSync)

    onPR() {
        echo "Loading PR secrets"
        loadVaultSecrets(prSecrets)
        env.ENV='preview'
    }

    onNonPR() {
        echo "Loading secrets"
        loadVaultSecrets(secrets)
        env.ENV='aat'
    }

  afterAlways('akschartsinstall') {

        echo "Just waiting a while to ensure that the pod has run the job"
        sh "sleep 120s"

        // Execute functional tests
        echo "Verifying that functional test run correctly"
        try {
            builder.gradle('functional')
        } finally {
            junit '**/test-results/**/*.xml'
        }
    }

  afterAlways('functionalTest:preview') {
        junit 'build/test-results/functional/**/*.xml'
        archiveArtifacts 'build/reports/tests/functional/index.html'

        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/functional",
                reportFiles          : "index.html",
                reportName           : "hmc-operational-reports-runner Functional Test Report"
        ]
    }

  afterAlways('functionalTest:aat') {
        junit 'build/test-results/functional/**/*.xml'
        archiveArtifacts 'build/reports/tests/functional/index.html'

        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/functional",
                reportFiles          : "index.html",
                reportName           : "hmc-operational-reports-runner Functional Test Report"
        ]
    }
}
